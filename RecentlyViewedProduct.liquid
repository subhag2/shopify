<!-- theme.liquid -->
{{ 'recently-viewed.js' | asset_url | script_tag }}
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const product = {
          id: {{ product.id }},
          image: "{{ product.featured_image | img_url: 'medium' }}",
          title: {{ product.title | json }},
          price: "{{ product.price | money_with_currency}}",
          url: "{{product.url}}",
          f_v_id: "{% if product.variants.size == 1 %}{{ product.variants.first.id }}{% endif %}",
          vendor: "{{ product.vendor }}"
        };
        manageRecentlyViewed(product);
      });
    </script>
<!-- recently-viewed.js -->
 <script>
// Global variable to store recently viewed products
let globalRecentlyViewed = [];

function manageRecentlyViewed(product) {
  const cookieName = "recentlyViewed";
  const maxProducts = 10; // Maximum number of products to store

  // Get existing cookie or create an empty array
  globalRecentlyViewed = JSON.parse(getCookie(cookieName) || "[]");

  // Remove the product if it's already in the list
  globalRecentlyViewed = globalRecentlyViewed.filter(
    (item) => item.id !== product.id
  );

  // Add the new product to the beginning of the array
  if (product != null) {
    globalRecentlyViewed.unshift({
      id: product.id,
      image: product.image,
      title: product.title,
      price: product.price,
      url: product.url,
      f_v_id: product.f_v_id,
      vendor: product.vendor,
    });
  }

  // Trim the array to the maximum number of products
  globalRecentlyViewed = globalRecentlyViewed.slice(0, maxProducts);

  // Save the updated list back to the cookie
  setCookie(cookieName, JSON.stringify(globalRecentlyViewed), 7); // Expires in 7 days
}

// Helper function to get a cookie
function getCookie(name) {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(";").shift();
}

// Helper function to set a cookie
function setCookie(name, value, days) {
  const date = new Date();
  date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
  const expires = `expires=${date.toUTCString()}`;
  document.cookie = `${name}=${value};${expires};path=/`;
}

// Function to get recently viewed products
function getRecentlyViewedProducts() {
  if (globalRecentlyViewed.length === 0) {
    // If global variable is empty, try to load from cookie
    const cookieValue = getCookie("recentlyViewed");
    if (cookieValue) {
      globalRecentlyViewed = JSON.parse(cookieValue);
    }
  }
  return globalRecentlyViewed;
}
 </script>
<!-- fetch Recently Viewed Product -->
<div class="best-selling-area recently-browse-section pt-70 pb-40 {% if template.suffix == "algo" %}bg-black{% endif %}">
  <div class="container">
    <div class="top-title-and-content">
      <div class="row align-items-center">
        <div class="col-lg-6">
          <div class="title">
            <h2
              {% if template.suffix == 'algo' %}
                class="text-white"
              {% endif %}
            >
              {{ section.settings.heading }}
            </h2>
          </div>
        </div>
        <div class="col-lg-6">
          <div class="right-content">
            <a href="{{ section.settings.b-link }}" class="default-btn">{{ section.settings['b-text'] }}</a>
          </div>
        </div>
      </div>
    </div>
    <div class="bestproduct-slider owl-carousel owl-theme" id="productContainer"></div>
  </div>
</div>
<script>
  var recentlyViewedProducts = getRecentlyViewedProducts();
  var container = document.getElementById('productContainer');
   var recentlyBrowseSection = document.querySelector('.recently-browse-section');
  var collectionTitle= "{{section.settings.brand}}";
  var productCount = 0;
  if (productCount ==0) {
      recentlyBrowseSection.style.display = 'none';
    }
  recentlyViewedProducts.forEach(function(product) {
    
    if (product.vendor == collectionTitle || !collectionTitle) {
      productCount++;
    // Determine whether to show the form or the anchor tag based on f_v_id
    var addToCartElement = '';
    
    if (product.f_v_id) {
      addToCartElement = `
        <form method="post" action="/cart/add">
          <input type="hidden" name="id" value="${product.f_v_id}">
          <button type="submit"><i class="flaticon-add-to-basket"></i> Add To Cart</button>
        </form>
      `;
    } else {
      addToCartElement = `
        <a href="${product.url}">
          <i class="flaticon-add-to-basket"></i> Show Options
        </a>
      `;
    }
    // Create the HTML structure for each product
    var singleShopCard = `
      <div class="single-shop-card rv-single-shop-card">
        <div class="shop-image">
          <img src="${product.image}" alt="${product.title}">
          <ul class="shop-btns">
            <li data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="">
               ${addToCartElement}
            </li>
          </ul>
        </div>
        <div class="content">
          <h3><a href="${product.url}">${product.title}</a></h3>
          <ul class="info">
            <li>
              <span>${product.price}</span>
            </li>
          </ul>
        </div>
      </div>
    `;
    
    // Append the HTML to the container
    container.innerHTML += singleShopCard;
    }
     // Hide the section if no products are found
    if (productCount !==0) {
      recentlyBrowseSection.style.display = '';
    }else{
      recentlyBrowseSection.style.display = 'none';
    }
  });
</script>
{% schema %}
{
  "name": "Recently Viewed Section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading"
    },
    {
      "type": "text",
      "id": "b-text",
      "label": "Button Text"
    },
    {
      "type": "text",
      "id": "b-link",
      "label": "Button Link"
    },
    {
      "type": "text",
      "id": "brand",
      "label": "Brand Name"
    }
  ],
  "presets": [
    {
      "name": "Recently Viewed Section"
    }
  ]
}
{% endschema %}
